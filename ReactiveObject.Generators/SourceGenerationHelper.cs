using ReactiveObject.Generators.Extensions;
using ReactiveObject.Generators.Models;
using System.Text;

namespace ReactiveObject.Generators;

public static class SourceGenerationHelper
{
    private const string _header = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ReactiveObject.Generators source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable";

    public const string Attribute = _header + @"
#if REACTIVEOBJECT_GENERATORS_EMBED_ATTRIBUTES
namespace ReactiveObject.Generators
{
    /// <summary>
    /// Add to property to indicate that extension methods should be generated for the type.
    /// </summary>
    [System.AttributeUsage(System.AttributeTargets.Property)]
    [System.Diagnostics.Conditional(""REACTIVEOBJECT_GENERATORS_USAGES"")]
    public class ReactivePropertyAttribute : System.Attribute
    {
    }
}
#endif
";
    public static string GenerateExtensionClass(in ClassToGenerate classToGenerate)
    {
        var accessibility = classToGenerate.Accessibility.ToString();
        var isStatic = false;

        var stringBuilder = new StringBuilder();
        stringBuilder
            .Append(_header)
            .AppendLine()
            .AppendNamespaceOpening(classToGenerate.Namespace)
            .AppendClassOpening(accessibility, isStatic, classToGenerate.Name);

        foreach (var propertyToGenerate in classToGenerate.PropertiesToGenerate)
        {
            stringBuilder.AppendProperty(propertyToGenerate);
        }

        stringBuilder
            .AppendClassEnding()
            .AppendNamespaceEnding(classToGenerate.Namespace);

        return stringBuilder.ToString();
    }
}
